const { pool } = require('../config/db');

class Supplier {
  static async getAll() {
    try {
      const result = await pool.query('SELECT * FROM public.suppliers');
      return result.rows;
    } catch (error) {
      console.error("Erreur dans getAll:", error);
      throw error;
    }
  }

  static async getById(id) {
    const result = await pool.query('SELECT * FROM public.suppliers WHERE id = $1', [id]);
    return result.rows[0];
  }

  static async create(name, email, phone, address, company, category, status, image) {
    try {
      // Validate required fields
      if (!name) {
        throw new Error('Name is required');
      }

      const result = await pool.query(
        `INSERT INTO public.suppliers 
         (name, email, phone, address, company, category, status, image) 
         VALUES ($1, $2, $3, $4, $5, $6, $7, $8) 
         RETURNING *`,
        [
          name.trim(),
          email ? email.toLowerCase().trim() : null,
          phone ? phone.trim() : null,
          address ? address.trim() : null,
          company ? company.trim() : null,
          category ? category.trim() : null,
          status || 'active',
          image || null
        ]
      );

      return result.rows[0];
    } catch (error) {
      console.error('Error in create supplier:', error);
      throw error;
    }
  }

  static async update(id, name, email, phone, address, company, category, status, image) {
    try {
      // Check if supplier exists
      const existingSupplier = await this.getById(id);
      if (!existingSupplier) {
        throw new Error('Supplier not found');
      }

      const result = await pool.query(
        `UPDATE public.suppliers 
         SET name = COALESCE($1, name),
             email = COALESCE($2, email),
             phone = COALESCE($3, phone),
             address = COALESCE($4, address),
             company = COALESCE($5, company),
             category = COALESCE($6, category),
             status = COALESCE($7, status),
             image = COALESCE($8, image),
             updated_at = CURRENT_TIMESTAMP
         WHERE id = $9 
         RETURNING *`,
        [
          name ? name.trim() : null,
          email ? email.toLowerCase().trim() : null,
          phone ? phone.trim() : null,
          address ? address.trim() : null,
          company ? company.trim() : null,
          category ? category.trim() : null,
          status || null,
          image || null,
          id
        ]
      );

      return result.rows[0];
    } catch (error) {
      console.error('Error in update supplier:', error);
      throw error;
    }
  }

  static async delete(id) {
    const result = await pool.query('DELETE FROM public.suppliers WHERE id = $1', [id]);
    return result.rowCount > 0;
  }
}

module.exports = Supplier;







{/*const mongoose = require('mongoose');

const supplierSchema = new mongoose.Schema({
  name: {
    type: String,
    required: true
  },
  email: {
    type: String,
    required: true,
    unique: true
  },
  phone: {
    type: String,
    required: true
  },
  address: {
    type: String,
    required: true
  },
  company: {
    type: String,
    required: true
  },
  category: {
    type: String,
    required: true
  },
  status: {
    type: String,
    enum: ['active', 'inactive'],
    default: 'active'
  },
  image: {
    type: String
  }
}, {
  timestamps: true
});

module.exports = mongoose.model('Supplier', supplierSchema);*/}