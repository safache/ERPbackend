const { pool }  = require('../config/db');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');

class Employee {
  static async getAll() {
    try {
      const result = await pool.query(
        'SELECT * FROM public.employees ORDER BY id DESC'
      );
      return result.rows;
    } catch (error) {
      console.error('Error in Employee.getAll:', error);
      throw error;
    }
  }

  static async getById(id) {
    try {
      const result = await pool.query(
        'SELECT * FROM public.employees WHERE id = $1',
        [id]
      );
      return result.rows[0];
    } catch (error) {
      console.error('Error in Employee.getById:', error);
      throw error;
    }
  }

  static async create(first_name, last_name, email,  department, hire_date, phone_number, address, salary, mdp = 'defaultPassword123', role = 'Worker') {
    try {
      // Validate required fields
      if (!first_name || !last_name || !email  || !department || !phone_number || !address) {
        throw new Error('Missing required fields');
      }

      // Hash password
      const hashedPassword = await bcrypt.hash(mdp, 10);

      const result = await pool.query(
        `INSERT INTO public.employees 
         (first_name, last_name, email,  department, hire_date, phone_number, address, salary, mdp, role) 
         VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10::employee_role) 
         RETURNING *`,
        [
          first_name.trim(),
          last_name.trim(),
          email.toLowerCase().trim(),
          department,
          hire_date || new Date(),
          phone_number.trim(),
          address.trim(),
          salary ? parseFloat(salary) : 0.00,
          hashedPassword,
          role
        ]
      );

      return result.rows[0];
    } catch (error) {
      console.error('Error in Employee.create:', error);
      throw error;
    }
  }

  static async update(id, first_name, last_name, email, department, hire_date, phone_number, address, salary, role) {
    try {
      // Verify employee exists
      const existingEmployee = await pool.query(
        'SELECT * FROM public.employees WHERE id = $1',
        [id]
      );

      if (!existingEmployee.rows[0]) {
        throw new Error(`Employee with ID ${id} not found`);
      }

      // Validate role enum value
      const validRoles = ['Admin', 'Manager', 'Worker'];
      const validatedRole = role && validRoles.includes(role) ? role : existingEmployee.rows[0].role;

      const result = await pool.query(
        `UPDATE public.employees 
         SET first_name = $1,
             last_name = $2,
             email = $3,
             department = $4::department_enum,
             hire_date = $5,
             phone_number = $6,
             address = $7,
             salary = $8,
             role = $9::employee_role,
             updated_at = CURRENT_TIMESTAMP
         WHERE id = $10 
         RETURNING *`,
        [
          first_name?.trim() || existingEmployee.rows[0].first_name,
          last_name?.trim() || existingEmployee.rows[0].last_name,
          (email ? email.toLowerCase().trim() : existingEmployee.rows[0].email),
          department || existingEmployee.rows[0].department,
          hire_date || existingEmployee.rows[0].hire_date,
          phone_number?.trim() || existingEmployee.rows[0].phone_number,
          address?.trim() || existingEmployee.rows[0].address,
          salary !== undefined ? parseFloat(salary) : existingEmployee.rows[0].salary,
          validatedRole,
          id
        ]
      );

      if (!result.rows[0]) {
        throw new Error('Update failed');
      }

      return result.rows[0];
    } catch (error) {
      console.error('Error in Employee.update:', error);
      throw error;
    }
  }

  static async delete(id) {
    try {
      const result = await pool.query(
        'DELETE FROM public.employees WHERE id = $1 RETURNING *',
        [id]
      );
      return result.rows[0];
    } catch (error) {
      console.error('Error in Employee.delete:', error);
      throw error;
    }
  }

  static async authenticate(email, mdp) {
    try {
      const result = await pool.query(
        'SELECT * FROM public.employees WHERE email = $1',
        [email.toLowerCase()]
      );

      if (result.rows.length === 0) {
        return null;
      }

      const employee = result.rows[0];
      const isValid = await bcrypt.compare(mdp, employee.mdp);

      if (!isValid) {
        return null;
      }

      // Generate JWT token
      const token = jwt.sign(
        { 
          id: employee.id, 
          email: employee.email,
          role: employee.role 
        },
        process.env.JWT_SECRET || 'your-secret-key',
        
      );

      return {
        id: employee.id,
        first_name: employee.first_name,
        last_name: employee.last_name,
        email: employee.email,
        role: employee.role,
        department: employee.department,
        token
      };
    } catch (error) {
      console.error('Error in Employee.authenticate:', error);
      throw error;
    }
  }
}

module.exports = Employee;